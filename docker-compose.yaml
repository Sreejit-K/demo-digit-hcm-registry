version: "2.4"

services:
  es:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - ./${ES_DATA_DIR}:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    healthcheck:
      test: [ "CMD", "curl", "-f", "localhost:9200/_cluster/health", "--header",  "Authorization: Basic ZWxhc3RpYzpEa0llZFBQU0Ni" ]
      interval: 30s
      timeout: 10s
      retries: 4
  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.1
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://${ES_CONNECTION_URL}
  db:
    image: postgres
    volumes:
      - ./${DB_DIR}:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
  zookeeper:
    image: 'confluentinc/cp-zookeeper:3.2.0'
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'
  kafka:
    image: 'confluentinc/cp-kafka:5.4.10'
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test:
        [ "CMD", "kafka-topics", "--list", "--zookeeper", "zookeeper:2181" ]
      interval: 30s
      timeout: 10s
      retries: 10
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
  registry:
    image: docker.io/subhash83925/sunbird-rc-core:elocker
    volumes:
      - ./${SCHEMA_DIR}:/home/sunbirdrc/config/public/_schemas
    environment:
      - connectionInfo_uri=jdbc:postgresql://${DB_URL}/${DB_NAME}
      - connectionInfo_username=${DB_USERNAME}
      - connectionInfo_password=${DB_PASSWORD}
      - elastic_search_auth_enabled=false
      - elastic_search_connection_url=${ES_CONNECTION_URL}
      - authentication_enabled=true
      - claims_enabled=true
      - claims_url=http://localhost:8082
      - opa_allow_key_name=authorized
      - opa_enabled=false
      - search_limit=2000
      - search_providerName=${SEARCH_PROVIDER_NAME}
      - signature_enabled=true
      - sign_url=http://certificate-signer:8079/sign
      - verify_url=http://certificate-signer:8079/verify
      - sign_health_check_url=http://certificate-signer:8079/health
      - pdf_url=http://certificate-api:8078/api/v1/certificatePDF
      - certificate_health_check_url=http://certificate-api:8078/health
      - template_base_url=http://registry:8081/api/v1/templates/ #Looks for certificate templates for pdf copy of the signed certificate
      - registry_base_apis_enable=false
      - sunbird_sso_realm=${KEYCLOAK_REALM-sunbird-rc}
      - sunbird_sso_url=http://keycloak:8080/auth
      - sunbird_sso_admin_client_id=${KEYCLOAK_ADMIN_CLIENT_ID-admin-api}
      - sunbird_sso_client_id=${KEYCLOAK_CLIENT_ID-registry-frontend}
      - sunbird_sso_admin_client_secret=${KEYCLOAK_SECRET}
      - sunbird_keycloak_user_password=abcd@123
      - sunbird_keycloak_user_set_password=true
      - logging.level.root=INFO
      - certificate_enabled=true
      - filestorage_enabled=${FILESSTORAGE_ENABLED-true}
      - filestorage_connection_url=http://file-storage:9000
      - filestorage_access_key=admin
      - filestorage_secret_key=12345678
      - filestorage_bucket_key=issuance
      - encryption_enabled=false
      - enable_external_templates=true
      - async_enabled=${ASYNC_ENABLED}
      - kafka_bootstrap_address=${KAFKA_BOOTSTRAP_URL}
      - webhook_enabled=false
      - webhook_url=http://localhost:5001/api/v1/callback
      - redis_host=${REDIS_HOST}
      - redis_port=${REDIS_PORT}
      - manager_type=${MANAGER_TYPE}
      - swagger_enabled=true
      - swagger_title=HCM
    ports:
      - "8081:8081"
    depends_on:
      es:
        condition: service_healthy
      db:
        condition: service_healthy
      kafka:
        condition: service_started
      redis:
        condition: service_started
    healthcheck:
      test: [ "CMD-SHELL", "wget -nv -t1 --spider http://localhost:8081/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 10
  keycloak:
    image: ghcr.io/sunbird-rc/sunbird-rc-keycloak:latest
    volumes:
      - ./${KEYCLOAK_IMPORT_DIR-imports}:/opt/jboss/keycloak/imports
    environment:
      - KEYCLOAK_LOGO=https://svgshare.com/i/hCs.svg
      - DB_VENDOR=postgres
      - DB_ADDR=db
      - DB_PORT=5432
      - DB_DATABASE=${DB_NAME}
      - DB_USER=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - KEYCLOAK_USER=${KEYCLOAK_ADMIN_USER-admin}
      - KEYCLOAK_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD-admin}
      - KEYCLOAK_IMPORT=/opt/jboss/keycloak/imports/realm-export.json
      - PROXY_ADDRESS_FORWARDING=true
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:9990/ || exit 1']
      interval: 30s
      timeout: 10s
      retries: 10
    ports:
      - '8080:8080'
      - '9990:9990'
    depends_on:
      db:
        condition: service_healthy
  claim-ms:
    image: ghcr.io/sunbird-rc/sunbird-rc-claim-ms:${RELEASE_VERSION}
    environment:
      - connectionInfo_uri=jdbc:postgresql://db:5432/postgres
      - connectionInfo_username=postgres
      - connectionInfo_password=postgres
      - sunbirdrc_url=http://registry:8081
    ports:
      - '8082:8082'
    depends_on:
      db:
        condition: service_started
      registry:
        condition: service_started
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget -nv -t1 --spider http://localhost:8082/health || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 10
  file-storage:
    image: quay.io/minio/minio
    volumes:
      - ${HOME}/minio/data:/data
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=12345678
    command: server --address 0.0.0.0:9000 --console-address 0.0.0.0:9001 /data
    ports:
      - '9000:9000'
      - '9001:9001'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 10
  certificate-signer:
    image: ghcr.io/sunbird-rc/sunbird-rc-certificate-signer:${RELEASE_VERSION}
    environment:
      - PORT=8079
      - TIME_ZONE=${TIME_ZONE-Asia/Kolkata}
    ports:
      - "8079:8079"
    volumes:
      - ./imports/keys:/etc/signer
    healthcheck:
      test:
        [ "CMD-SHELL", "curl -f http://localhost:8079/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 10
  certificate-api:
    image: ghcr.io/sunbird-rc/sunbird-rc-certificate-api:${RELEASE_VERSION}
    environment:
      - PORT=8078
      - QR_TYPE=W3C-VC
    ports:
      - "8078:8078"
    healthcheck:
      test:
        [ "CMD-SHELL", "wget -nv -t1 --spider http://localhost:8078/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 10
  public-key-service:
    image: ghcr.io/sunbird-rc/sunbird-rc-public-key-service
    environment:
      - CONFIG_BASE_PATH=/etc/keys
    ports:
      - '3300:3300'
    healthcheck:
      test:
        ['CMD', 'curl', '-f', 'localhost:3300/public-key-service/api/v1/health']
      interval: 30s
      timeout: 10s
      retries: 10
    volumes:
      - ./imports/keys:/etc/keys
  context-proxy-service:
    image: ghcr.io/sunbird-rc/sunbird-rc-context-proxy-service
    ports:
      - '4400:4400'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'localhost:4400/health']
      interval: 30s
      timeout: 10s
      retries: 10
  nginx:
    image: sreejithk1903/verification-digit
    ports:
      - '81:80'
  elocker-ui: 
    image: subhash83925/elocker-ui:latest
    volumes:
      - ./elocker.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      registry:
        condition: service_started
      keycloak:
        condition: service_started
    ports: 
      - '82:80'

networks:
  default:
    name: hcm-net